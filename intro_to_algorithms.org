#+TITLE: Введение в алгоритмы
#+EMAIL: @pvavilin
#+AUTHOR: @pvavilin
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smallest]
#+LATEX_HEADER: \usetheme{default}
#+LATEX_HEADER: \usecolortheme{crane}
#+LATEX_HEADER: \usepackage{tikzsymbols}
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}
#+LaTeX_HEADER: \lstset{basicstyle=\scriptsize\ttfamily}
#+LATEX_HEADER: \usepackage{xlop}
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight]{bg.jpeg}}
#+OPTIONS: \n:t ^:nil

#+NAME: import
#+BEGIN_SRC python :exports none
  import sys
  import timeit
  from typing import List
#+END_SRC
#+NAME: running
#+BEGIN_SRC python :exports none
  if __name__ == "__main__":
      int_count = sys.argv[1]
      with open(f"data/{int_count}ints.txt", "r") as data:
          arr: List[int] = [int(line.strip()) for line in data.readlines()]
          number:int = 2
          def to_call():
              return counter(arr)
          result = timeit.timeit(to_call, number=number)
          print(
              f"{number} вызовов для {int_count} данных: лучший результат равен {result:.02f}"
          )
#+END_SRC
#+NAME: running_sort
#+BEGIN_SRC python :exports none
  if __name__ == "__main__":
      int_count = sys.argv[1]
      with open(f"data/{int_count}ints.txt", "r") as data:
          arr: List[int] = [int(line.strip()) for line in data.readlines()]
          number:int = 2
          def to_call():
              return sort_alg(arr)
          result = timeit.timeit(to_call, number=number)
          print(
              f"{number} вызовов для {int_count} данных: лучший результат равен {result:.02f}"
          )
#+END_SRC
* Зачем нужны алгоритмы?
** Задача
  Подсчитать, какое количество сочетаний по три элементов входного массива даст в сумме 0.

* Зачем нужны алгоритмы?
  #+BEGIN_SRC python :exports code :noweb strip-export :tangle first_try.py :shebang "#!/usr/bin/env python3"
    <<import>>
    def counter(a: List[int]) -> int:
        N:int = len(a)
        counter:int = 0
        for i in range(N):
            for j in range(i+1, N):
                for k in range(j+1, N):
                    s = a[i] + a[j] + a[k]
                    if s == 0:
                        counter += 1
        return counter

    <<running>>
  #+END_SRC

* Результат наивной реализации
  #+BEGIN_QUOTE
  % python ./first_try.py 1K
2 вызовов для 1K данных: лучший результат равен 42.02
  % python ./first_try.py 2K
2 вызовов для 2K данных: лучший результат равен 340.84
  #+END_QUOTE
* Бинарный поиск
  #+NAME: binary_search
  #+BEGIN_SRC python :exports code :noweb strip-export
    <<import>>

    def binary_search(
            lst:List[int], target:int
    ) -> int:
        start:int = 0
        end:int = len(lst) - 1
        while(start <= end):
            mid = (start + end) // 2
            if(lst[mid] > target):
                end = mid - 1
            elif(lst[mid] < target):
                start = mid + 1
            else:
                return mid
        return -1
  #+END_SRC
* Быстрый ThreeSum
  #+BEGIN_SRC python :exports code :noweb strip-export :tangle fast_threesum.py :shebang "#!/usr/bin/env python3"
    <<binary_search>>

    def counter(a: List[int]) -> int:
      # O(NlogN)
      arr:List[int] = sorted(a)
      N:int = len(arr)
      counter:int = 0
      for i in range(N):
        for j in range(i+1, N):
          # O(logN)
          if binary_search(
            arr, -(arr[i]+arr[j])
          ) > j:
            counter += 1
      return counter
    <<running>>
  #+END_SRC
* Результат быстрого ThreeSum
  #+BEGIN_QUOTE
  % python fast_threesum.py 1K
2 вызовов для 1K данных: лучший результат равен 1.64
  % python fast_threesum.py 2K
2 вызовов для 2K данных: лучший результат равен 7.36
  % python fast_threesum.py 4K
2 вызовов для 4K данных: лучший результат равен 31.31
  #+END_QUOTE
* Алгоритмическая сложность
  #+ATTR_LATEX: :width 1.1\textwidth
  [[file:order_of_growth.png]]
* Нужны ли алгоритмы backend-разработчику?
  #+ATTR_LATEX: :width .8\textwidth
  [[file:algorithms_for_kids.png]]
* Какие алгоритмы нужнее всего?
** Зависит от задачи, области применения
   - алгоритмы на строках
     нужны например биоинформатикам, для работы с последовательностями ДНК
   - алгоритмы на деревьях
     - компиляторы
     - машинное обучение
     - построение маршрутов
     - парсинг сайтов
* Структуры данных. Очередь
  - FIFO :: First In First Out
  #+ATTR_LATEX: :width .8\textwidth
  [[file:Fifo_queue.png]]
* Структуры данных. Стек
  - LIFO :: Last In First Out
  #+ATTR_LATEX: :width .8\textwidth
  [[file:Lifo_stack.png]]
* Структуры данных. Граф
  #+NAME: graph
  #+BEGIN_SRC python :exports code
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
  #+END_SRC
  #+ATTR_LATEX: :width .18\textwidth
  [[file:graph.png]]
* Поиск вглубину. Depth-First Search
  #+BEGIN_SRC python :exports both :noweb strip-export :results output
    <<graph>>
    def dfs(graph, start, goal):
      stack = [(start, [start])]
      while stack:
        (v, p) = stack.pop()
        paths = set(graph[v]) - set(p)
        for nxt in paths:
          if nxt == goal:
            yield p + [nxt]
          else:
            stack.append((nxt, p+[nxt]))
    print(list(dfs(graph, 'A', 'F')))
  #+END_SRC

  #+RESULTS:
  : [['A', 'C', 'F'], ['A', 'B', 'E', 'F']]

* Глупая сортировка / сортировка дурака
  #+NAME: fool_sort
  #+BEGIN_SRC python :exports code
    def sort_alg(l):
      while True:
        c = 0
        for i in range(len(l)-1):
          if l[i] > l[i+1]:
            l[i+1],l[i] = l[i],l[i+1]
          else:
            c += 1
        if c == (len(l) - 1): return l

  #+END_SRC

  #+BEGIN_SRC python :exports both :results output :noweb strip-export
    <<fool_sort>>
    print(sort_alg([1, 3, 2, 0]))
  #+END_SRC

  #+RESULTS:
  : [0, 1, 2, 3]

* Результат глупой сортировки
  - Эффективность *глупой сортировки*: $\mathcal{O}(N^{3})$
  #+BEGIN_SRC python :exports none :tangle fool_sort.py :noweb tangle :shebang "#!/usr/bin/env python3"
    <<import>>


    <<fool_sort>>

    <<running_sort>>
  #+END_SRC
  #+BEGIN_QUOTE
  % ./fool_sort.py 1K
2 вызовов для 1K данных: лучший результат равен 0.12
  % ./fool_sort.py 2K
2 вызовов для 2K данных: лучший результат равен 0.53
  % ./fool_sort.py 4K
2 вызовов для 4K данных: лучший результат равен 2.15
  #+END_QUOTE
* Пузырьковая сортировка
  #+NAME: bubble_sort
  #+BEGIN_SRC python :exports none
    def sort_alg(l):
      for i in range(len(l)):
        for j in range(len(l[i+1:])):
          if l[j] > l[j+1]:
            l[j], l[j+1] = (l[j+1], l[j])
      return l
  #+END_SRC

  #+begin_src python :exports both :noweb yes :results output
    <<bubble_sort>>

    print(sort_alg([1, 3, -1, 2, 0]))
  #+end_src

  #+RESULTS:
  : [-1, 0, 1, 2, 3]
* Результат пузырьковой сортировки
  #+begin_src python :exports none :tangle bubble_sort.py :noweb tangle :shebang "#!/usr/bin/env python3"
    <<import>>


    <<bubble_sort>>

    <<running_sort>>
  #+end_src
  - Эффективность *пузырьковой сортировки*: $\mathcal{O}(N^{2})$
  #+begin_quote
  % ./bubble_sort.py 1K
2 вызовов для 1K данных: лучший результат равен 0.11
  % ./bubble_sort.py 2K
2 вызовов для 2K данных: лучший результат равен 0.45
  % ./bubble_sort.py 4K
2 вызовов для 4K данных: лучший результат равен 1.86
  #+end_quote
* Сортировка слиянием (Merge Sort)
  - __[[https://gist.github.com/pimiento/72ea7cc917e1e732f834e307f6998d89][Код]]__
  - __[[https://www.youtube.com/watch?v=JSceec-wEyw][мультик]]__
  Сортировка слиянием позволяет нам распараллелить процесс сортировки. Это очень эффективно на больших данных и широко используется в алгоритмах map/reduce.
* Результат Merge Sort
  - Эффективность *Merge Sort*: $\mathcal{O}(NlogN)$
  #+begin_src python :exports none :tangle merge_sort.py :noweb tangle :shebang "#!/usr/bin/env python3"
    <<import>>


    def merge_sort(A):
        if len(A) == 1 or len(A) == 0:
            return A
        L, R = A[:len(A) // 2], A[len(A) // 2:]
        merge_sort(L)
        merge_sort(R)
        n = m = k = 0
        C = [0] * (len(L) + len(R))
        while n < len(L) and m < len(R):
            if L[n] <= R[m]:
                C[k] = L[n]
                n += 1
            else:
                C[k] = R[m]
                m += 1
            k += 1
        while n < len(L):
            C[k] = L[n]
            n += 1
            k += 1
        while m < len(R):
            C[k] = R[m]
            m += 1
            k += 1
        for i in range(len(A)):
            A[i] = C[i]
        return A

    def sort_alg(A):
        return merge_sort(A)

    <<running_sort>>
  #+end_src
  #+begin_quote
  % ./merge_sort.py 1K
2 вызовов для 1K данных: лучший результат равен 0.01
  % ./merge_sort.py 4K
2 вызовов для 4K данных: лучший результат равен 0.03
  % ./merge_sort.py 8K
2 вызовов для 8K данных: лучший результат равен 0.07
  % ./merge_sort.py 32K
2 вызовов для 32K данных: лучший результат равен 0.31
  #+end_quote
* Сравнение алгоритмов сортировки
  #+ATTR_LATEX: :width 1.1\textwidth
  [[file:sorting_algorithms.png]]

* Умножение двух чисел
  \begin{equation}
  \opmul{5678}{1234}\qquad
  \end{equation}
* Умножение двоичных чисел
  #+ATTR_LATEX: :width .8\textwidth
  [[file:binary_multiplication.png]]
  /Можно ли лучше?/
* Алгоритм Каратцубы
  #+NAME: karatsuba
  #+BEGIN_SRC python :exports code
    x = 5678
    y = 1234

    a = 56; b = 78
    c = 12; d = 34
  #+END_SRC
* Алгоритм Каратцубы
  #+NAME: pre_result
  #+BEGIN_SRC python :exports code :noweb strip-export
    <<karatsuba>>
    # step1
    step1 = a * c
    # step2
    step2 = b * d
    # step3
    a_b = a + b
    c_d = c + d
    step3 = a_b * c_d
    # step4:
    # step3 - step2 - step1
    step4 = step3 - step2 - step1
  #+END_SRC
* Алгоритм Каратцубы
  #+BEGIN_SRC python :exports both :noweb strip-export :results output
    <<pre_result>>
    line1 = step1 * 10**4
    line2 = step2
    line3 = step4 * 10**2
    result = (
        line1
        + line2
        + line3
    )
    print(result)
  #+END_SRC

  #+RESULTS:
  : 7006652
* Умножение матриц
  \begin{equation}
  \left[ \begin{array}{ccc} A & B \\ C & D \\ \end{array} \right]
  \times
  \left[ \begin{array}{ccc} E & F \\ G & H \\ \end{array} \right]
  = \left[ \begin{array}{ccc} AE + BG & AF + BH \\ CE + DG & CF + DH \\ \end{array} \right]
  \end{equation}

* Умножение матриц
  #+BEGIN_SRC python :exports code
    def mxm(A, X):
      n = len(A)    # A: n×m
      m = len(A[0])
      p = len(X[0]) # X: m×p
      B = [[0] * p] * n
      for i in range(n):
        for j in range(p):
          for k in range(m):
            B[i][j] += A[i][k]*X[k][j]
      return B
  #+END_SRC
  *Где ошибка в этом коде?*
* Умножение матриц
  #+NAME: matrix_multiply
  #+BEGIN_SRC python :exports code
    def mxm(A, X):
      n = len(A)    # A: n×m
      m = len(A[0])
      p = len(X[0]) # X: m×p
      B = [[0] * p for _ in range(n)]
      for i in range(n):
        for j in range(p):
          for k in range(m):
            B[i][j] += A[i][k]*X[k][j]
      return B
  #+END_SRC
  #+BEGIN_SRC python :exports none :noweb strip-export :tangle matrix_multiply.py :shebang "#!/usr/bin/env python3"
    import numpy as np
    <<matrix_multiply>>

    A = [
      [1, 2, 3, 4],
      [1, 2, 3, 4],
      [1, 2, 3, 4],
      [1, 2, 3, 4]
    ]

    B = [
        [5, 5, 5, 5],
        [6, 6, 6, 6],
        [7, 7, 7, 7],
        [8, 8, 8, 8]
    ]

    result = mxm(A, B)
    print(result)

    np_result = np.dot(np.array(A), np.array(B))
    assert (np_result == np.array(result)).all(), [np_result, np.array(result)]
  #+END_SRC
  #+BEGIN_CENTER
  $O(n^{3})$
  /Можно ли лучше?/
  #+END_CENTER
* Алгоритм Штрассена
  \begin{normalsize}
  \left[ \begin{array}{cccc} 11 & 12 & 13 & 14 \\ 21 & 22 & 23 & 24 \\ 31 & 32 & 33 & 34 \\ 41 & 42 & 43 & 44 \\ \end{array} \right] =
  \left[ \begin{array}{cc} A & B \\ C & D \\ \end{array} \right]
  \end{normalsize}
  \begin{normalsize}
  \left[ \begin{array}{cccc} 11 & 21 & 31 & 41 \\ 12 & 22 & 32 & 42 \\ 13 & 23 & 33 & 43 \\ 14 & 24 & 34 & 44 \\ \end{array} \right] =
  \left[ \begin{array}{cc} E & F \\ G & H \\ \end{array} \right]
  \end{normalsize}

* Алгоритм Штрассена
  \begin{array}{l}
  P_{1} = A(F - H), \\
  P_{2} = (A + B)H, \\
  P_{3} = (C + D)E, \\
  P_{4} = D(G - E), \\
  P_{5} = (A + D)(E + H), \\
  P_{6} = (B - D)(G + H), \\
  P_{7} = (A - C)(E + F) \\
  \end{array}
  \begin{footnotesize}
  \left[ \begin{array}{cc} AE+BG & AF+BH \\ CE+DG & CF+DH \end{array} \right] =
  \left[ \begin{array}{ll} P_{5} + P_{4} - P_{2} + P_{6} & P_{1} + P_{2} \\ P_{3} + P_{4} & P_{1} + P_{5} - P_{3} + P_{7} \end{array} \right]
  \end{footnotesize}

* векторизация
  - Большинство операций процессора это SISD: Single Instruction Single Data
    #+ATTR_LATEX: :center t :mode table :align l|l|l|l
    | 0     | 1        | 2        | 3        |
    | a[0]= | not used | not used | not used |
    | b[0]+ | not used | not used | not used |
    | c[0]  | not used | not used | not used |
  - Процессор может поддерживать специальные регистры для __[[https://ru.wikipedia.org/wiki/SIMD][SIMD]]__: Single Instruction Multiple Data
    #+ATTR_LATEX: :center t :mode table :align l|l|l|l
    | 0     | 1     | 2     | 3     |
    | a[0]= | a[1]= | a[2]= | a[3]= |
    | b[0]+ | b[1]+ | b[2]+ | b[3]+ |
    | c[0]  | c[1]  | c[2]  | c[3]  |

* Пример умножения матриц
  __[[https://datahacker.rs/003-how-to-resize-translate-flip-and-rotate-an-image-with-opencv/][Article]]__
  #+ATTR_LATEX: :width .5\textwidth
  [[file:image_rotates.jpg]]
* Логистическая регрессия
  $z = w_{0}x + w_{1}x + \dots + w_{n}x + b$ \\
  $a = \frac{1}{1+e^{-z}}$
    #+BEGIN_SRC python :results file :exports results
      import matplotlib
      matplotlib.use("Agg")

      import matplotlib.pyplot as plt
      from scipy.special import expit
      import numpy as np

      #define range of x-values
      x = np.linspace(-10, 10, 100)

      #calculate sigmoid function for each x-value
      y = expit(x)

      #create plot
      plt.plot(x, y)
      plt.xlabel('z', loc="right")
      plt.ylabel("σ(z)", loc="top")
      ax = plt.gca()
      ax.spines[["left", "bottom"]].set_position(("data", 0))
      ax.spines[["top", "right"]].set_visible(False)
      ax.plot(1, 0, ">k", transform=ax.get_yaxis_transform(), clip_on=False)
      ax.plot(0, 1, "^k", transform=ax.get_xaxis_transform(), clip_on=False)

      #display plot
      fname = "sigmoid_fun.png"
      plt.savefig(fname)

      return fname
    #+END_SRC

    #+attr_latex: :width 160px
    #+RESULTS:
    [[file:sigmoid_fun.png]]
* Котики!
  __[[https://github.com/pimiento/numerical_algorithms_ML_webinar/blob/master/nn_model.py][GitHub]]__
* Tensorflow
  __[[https://colab.research.google.com/drive/1peolUQzHOVC4QVELMCBO1zluc1-pNsma?usp=sharing][Colab]]__
* Как изучать алгоритмы
  - __[[https://practicum.yandex.ru/algorithms/][Яндекс.Практикум]]__
  - Coursera (__[[https://www.coursera.org/learn/algorithms-part1][Part I]]__, __[[https://www.coursera.org/learn/algorithms-part2][Part II]]__)
  - Альманах алгоритмов: Т.Кормен, Ч.Лейзерсон, Р.Ривест, К.Штайн «Алгоритмы. Построение и анализ.»
  - [[https://acm.timus.ru/?locale=ru][Порешать задачки. Timus]]
* Вопросы-ответы
  #+ATTR_LATEX: :width .6\textwidth
  [[file:///home/pimiento/yap/questions.jpg]]
